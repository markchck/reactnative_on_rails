{"version":3,"sources":["index.js","App.js"],"names":["API_URL","styles","StyleSheet","create","container","flex","backgroundColor","header","flexDirection","marginTop","marginBottom","justifyContent","body","input","alignItems","textInput","output","height","trashButton","position","right","editButton","Index","useState","notes","setNotes","text","setText","mode","setMode","itemNumber","setItemNumber","useEffect","axios","get","then","res","data","catch","console","log","JSON","stringify","length","addNote","fetch","method","headers","push","attributes","changeNote","id","newNotes","grid","Object","keys","map","item","View","style","Text","TouchableOpacity","onPress","updateNote","AntDesign","name","size","color","confirm","deleteNote","Fontisto","StatusBar","TextInput","value","onChangeText","onSubmitEditing","ScrollView","App"],"mappings":"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","file":"static/js/app.89dbeb2f.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, TextInput, TouchableOpacity, View, ScrollView, } from 'react-native';\nimport React, { useEffect, useState } from 'react'\nimport { Fontisto, AntDesign } from '@expo/vector-icons';\nimport axios from 'axios';\n\n// const API_URL = \"http://127.0.0.1:3000/api/v1\"\nconst API_URL = \"http://localhost:3000/api/v1\"\n\nfunction Index() {\n  const [notes, setNotes] = useState({})\n  // const [notes, setNotes] = useState([])\n  const [text, setText] = useState(\"\")\n  const [mode, setMode] = useState(\"post\")\n  const [itemNumber, setItemNumber] = useState(null)\n\n  // useEffect(()=>{\n  //   fetch(`${API_URL}/notes`)\n  //   .then(res => res.json())\n  //   .then(res => setNotes((res.data)))\n  //   .catch(res => {\n  //     console.log(JSON.stringify(res))\n  //   })\n  // }, [notes.length]\n  // )\n\n  useEffect( ()=> {\n      axios.get(`${API_URL}/notes`)\n      // 안드로이드가 http는 막아놔서 웹에서는 정상 출력되는데 앱에서는 출력이 안될거임. https로 바꿔서 넣으면 출력 됨.\n      // axios.get(\"https://jsonplaceholder.typicode.com/posts/1\")\n      .then(res => {\n        // setNotes(JSON.stringify((res.data.data[0].attributes.text)))\n        setNotes((res.data.data))\n      })\n      .catch(res => {\n        console.log(JSON.stringify(res))\n      })\n    }, [notes.length]\n  )\n\n  //axios말고 fetch함수로 api 받아보기\n  // fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n  //   .then((response) => response.json())\n  //   .then((apple) => console.log(apple.title))\n  //   .catch((response)=> console.log(response))\n\n  //notes를 배열로 설정한 경우(Map으로 이터레이팅해야함)\n  // const grid = notes.map(item => {\n  //   console.log(item)\n  //   return(\n  //     <View style={styles.output}>\n  //       <Text> {item.attributes.text}</Text>\n  //       {/* <Text> {JSON.stringify(item)}</Text> */}\n  //     </View>\n  //   )\n  // })\n\n  let content = () => {\n    if (mode === 'post'){\n      return (\n        <View style={styles.input}>\n          <TextInput \n            style={styles.textInput}\n            value = {text}\n            // placeholder= \"type here\"\n            onChangeText = {setText}\n            onSubmitEditing = {addNote}\n          />\n        </View>\n      )\n    }else if (mode === 'update'){\n      return (\n        <View style={styles.input}>\n          <TextInput \n            style={styles.textInput}\n            value = {text}\n            // placeholder= \"type here\"\n            onChangeText = {setText}\n            onSubmitEditing = {changeNote}\n          />\n        </View>\n      )\n    }\n  };\n  \n  // const addNote = () => {\n  //   axios.post(`${API_URL}/notes`,{text: text})\n  //   .then(res => {\n  //     // console.log(res.data.data.attributes.text)\n  //     setNotes(notes.push({attributes: {text: text}}))\n  //     setText(\"\")\n  //   })\n  //   .catch(res=> {console.log(res)})\n  // }\n\n  const addNote   = () => {\n    fetch(`${API_URL}/notes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\" : \"application/json\"\n      },\n      body: JSON.stringify({\n        text: text\n      })\n    })\n    .then(res => setNotes(notes.push({attributes: {text: text}})))\n    .catch(res => console.log(res))\n  }\n\n  // const changeNote =() =>{\n  //   // console.log(text)\n  //   axios.put(`${API_URL}/notes/${notes[itemNumber].id}`, {text: text})\n  //   const newNotes = {...notes}\n  //   setNotes(newNotes)\n  //   setText(\"\")\n  //   setMode(\"post\")\n  // }  \n\n  const changeNote = () => {\n    fetch(`${API_URL}/notes/${notes[itemNumber].id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\" : \"application/json\"\n      },\n      body: JSON.stringify({\n        text: text\n      })\n    })\n    .then(res => {\n      const newNotes = {...notes}\n      setNotes(newNotes)\n      setText(\"\")\n      setMode(\"post\")\n    })\n    .catch(res => console.log(res))\n  }\n\n  const updateNote = (item) =>{\n    // console.log(notes[item].attributes.text)\n    setText(notes[item].attributes.text)\n    setMode('update')\n    setItemNumber(item)\n  }\n\n  // const deleteNote = (item) =>{\n  //   const ok = confirm(\"Do you want to delete?\")\n  //   if (ok) {\n  //     axios.delete(`${API_URL}/notes/${notes[item].id}`)\n  //     const newNotes = {...notes}\n  //     setNotes(newNotes)\n  //     setText(\"\")\n  //   }\n  // }\n\n  const deleteNote = (item) => {\n    const ok = confirm(\"Do you want to delete?\")\n    if (ok) {\n      fetch(`${API_URL}/notes/${notes[item].id}`, {\n        method: \"DELETE\",\n      })\n      .then(res => {\n        const newNotes = {...notes}\n        setNotes(newNotes)\n        setText(\"\")\n      })\n    }\n  }\n  \n  //notes를 객체로 설정한 경우(object.keys로 객체의 key값을 알아내서 Map으로 이터레이팅해야함\n  const grid = Object.keys(notes).map(item => {\n    return(\n      <View key= {item} style={styles.output}>\n        <Text> {notes[item].attributes.text}</Text>\n        <TouchableOpacity style={styles.editButton} onPress={()=>updateNote(item)}>\n          <AntDesign name=\"edit\" size={24} color=\"white\" />\n        </TouchableOpacity>\n        <TouchableOpacity style = {styles.trashButton} onPress={()=>deleteNote(item)}>\n          <Fontisto name=\"trash\" size={20} color=\"white\" />\n        </TouchableOpacity>\n      </View>\n    )\n  })\n \n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\"/>  \n      <View style={styles.header}>\n        <TouchableOpacity>\n          <Text>work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity>\n          <Text>travel</Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.body}>\n        {content()}\n        <ScrollView>\n          {grid}\n        </ScrollView>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n  },\n  header: {\n    flexDirection: 'row',\n    marginTop: 30,\n    marginBottom: 50,\n    backgroundColor: 'green',\n    justifyContent: 'space-around',\n  },\n  body: {\n    backgroundColor: 'tomato',\n\n  },\n  input: {\n    backgroundColor: 'pink',\n    alignItems: 'center',\n  },\n  textInput:{\n    backgroundColor: 'green',\n  },\n  output: {\n    flexDirection: 'row',\n    backgroundColor: 'blue',\n    height: 25,\n  },\n  trashButton:{\n    position: 'absolute',\n    right: 0\n  },\n  editButton: {\n    position: 'absolute',\n    right: 25\n  },\n});\nexport default Index","import React, { useEffect, useState } from 'react'\nimport Index from './index'\n\nexport default function App() {\n  return (\n    <Index></Index>\n  );\n}\n\n"],"sourceRoot":""}